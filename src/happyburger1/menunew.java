/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package happyburger1;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author damha
 */
public class menunew extends javax.swing.JInternalFrame {

    DefaultTableModel model;
    /**
     * Creates new form menunew
     */
    public menunew() {
        initComponents();
        model = (DefaultTableModel) tabelMenu.getModel();
        populateTable();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui =(BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        idmenu = new javax.swing.JTextField();
        namamenu = new javax.swing.JTextField();
        deskripsi = new javax.swing.JTextField();
        harga = new javax.swing.JTextField();
        btsimpan = new javax.swing.JButton();
        btbersihkan = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelMenu = new javax.swing.JTable();
        btsimpanPerubahan = new javax.swing.JButton();
        bthapus = new javax.swing.JButton();
        btedit = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID Menu");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nama Menu");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Deskripsi");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Harga");

        idmenu.setText(" ");
        idmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idmenuActionPerformed(evt);
            }
        });

        namamenu.setText(" ");

        deskripsi.setText(" ");

        harga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hargaActionPerformed(evt);
            }
        });

        btsimpan.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btsimpan.setForeground(new java.awt.Color(153, 153, 255));
        btsimpan.setText("Simpan Data");
        btsimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btsimpanActionPerformed(evt);
            }
        });

        btbersihkan.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btbersihkan.setForeground(new java.awt.Color(153, 153, 255));
        btbersihkan.setText("Bersihkan");
        btbersihkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btbersihkanActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(51, 51, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tabelMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Menu", "Nama Menu", "Deskripsi", "Harga"
            }
        ));
        jScrollPane1.setViewportView(tabelMenu);

        btsimpanPerubahan.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btsimpanPerubahan.setForeground(new java.awt.Color(153, 153, 255));
        btsimpanPerubahan.setText("Simpan Perubahan");
        btsimpanPerubahan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btsimpanPerubahanActionPerformed(evt);
            }
        });

        bthapus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bthapus.setForeground(new java.awt.Color(153, 153, 255));
        bthapus.setText("Hapus");
        bthapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bthapusActionPerformed(evt);
            }
        });

        btedit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btedit.setForeground(new java.awt.Color(153, 153, 255));
        btedit.setText("Edit");
        btedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bteditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(64, 64, 64)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(namamenu, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                            .addComponent(deskripsi, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(harga, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idmenu))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(btbersihkan, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btsimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btsimpanPerubahan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btedit, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bthapus, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(518, 518, 518))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idmenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(namamenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(deskripsi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(harga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btsimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btsimpanPerubahan, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bthapus, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btedit, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btbersihkan, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 212, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(16, 16, 16))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateTable() {
    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk mengambil data dari database
        String sql = "SELECT * FROM menu";
        try (java.sql.Statement stmt = conn.createStatement()) {
            // Mengosongkan model tabel
            DefaultTableModel model = (DefaultTableModel) tabelMenu.getModel();
            model.setRowCount(0);

            // Mengisi ulang data dari hasil query
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                String idMenu = rs.getString("id_menu");
                String namaMenu = rs.getString("nama_menu");
                String Deskripsi = rs.getString("deskripsi");
                float Harga = rs.getFloat("harga");

                // Menambahkan data ke model tabel
                model.addRow(new Object[]{idMenu, namaMenu, Deskripsi, Harga});
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengambil data dari database.");
    }

}
    private void idmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idmenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idmenuActionPerformed

    private void btsimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsimpanActionPerformed
        // TODO add your handling code here:
        String ID_Menu = idmenu.getText();
        String Nama_Menu = namamenu.getText();
        String Deskripsi = deskripsi.getText();
        float Harga = Float.parseFloat(harga.getText());

try {
    // Mendapatkan koneksi dari objek Koneksi
    Koneksi koneksi = new Koneksi();
    Connection conn = koneksi.conn;

    // Menyiapkan pernyataan SQL untuk menyimpan data
    String sql = "INSERT INTO menu (id_menu, nama_menu, deskripsi, harga) VALUES (?, ?, ?, ?)";
    try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
        // Mengatur nilai parameter PreparedStatement
        pstmt.setString(1, ID_Menu);
        pstmt.setString(2, Nama_Menu);
        pstmt.setString(3, Deskripsi);
        pstmt.setFloat(4, Harga);

        // Menjalankan pernyataan simpan
        pstmt.executeUpdate();

        // Memberikan informasi bahwa data telah disimpan
        JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");

        // Setelah menyimpan, bersihkan inputan
        idmenu.setText("");
        namamenu.setText("");
        deskripsi.setText("");
        harga.setText("");
        
        refreshTable();
    }

} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan data.");
}
    }//GEN-LAST:event_btsimpanActionPerformed

    private void btbersihkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btbersihkanActionPerformed
        // TODO add your handling code here:
        idmenu.setText("");
        namamenu.setText("");
        deskripsi.setText("");
        harga.setText("");
    }//GEN-LAST:event_btbersihkanActionPerformed

    private void hargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hargaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hargaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Dashboard brd = new Dashboard(); 
        brd.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        brd.pack();
        brd.setVisible(true);

        // Tutup form 
        JFrame thisFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        thisFrame.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btsimpanPerubahanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btsimpanPerubahanActionPerformed
        // TODO add your handling code here:
        String ID_Menu = idmenu.getText();
        String Nama_Menu = namamenu.getText();
        String Deskripsi = deskripsi.getText();
        float Harga = Float.parseFloat(harga.getText());

    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk mengupdate data
        String sql = "UPDATE menu SET nama_menu=?, deskripsi=?, harga=? WHERE id_menu=?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            // Mengatur nilai parameter PreparedStatement
            pstmt.setString(1, Nama_Menu);
            pstmt.setString(2, Deskripsi);
            pstmt.setFloat(3, Harga);
            pstmt.setString(4, ID_Menu);

            // Menjalankan pernyataan update
            int rowsUpdated = pstmt.executeUpdate();

            // Memberikan informasi bahwa data telah diupdate
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil diupdate!");
            } else {
                JOptionPane.showMessageDialog(this, "Gagal mengupdate data. Periksa kembali inputan Anda.");
            }

            // Setelah mengupdate, bersihkan inputan
            idmenu.setText("");
            namamenu.setText("");
            deskripsi.setText("");
            harga.setText("");

            // Refresh tabel
            refreshTable();
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengupdate data.");
    }
}

private void refreshTable() {
    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk mengambil data dari database
        String sql = "SELECT * FROM menu";
        try (PreparedStatement pstmt = conn.prepareStatement(sql); ResultSet rs = pstmt.executeQuery()) {
            // Mengosongkan model tabel
            DefaultTableModel model = (DefaultTableModel) tabelMenu.getModel();
            model.setRowCount(0);

            // Mengisi ulang data dari hasil query
            while (rs.next()) {
                String idMenu = rs.getString("id_menu");
                String namaMenu = rs.getString("nama_menu");
                String Deskripsi = rs.getString("deskripsi");
                String Harga = rs.getString("harga");

                // Menambahkan data ke model tabel
                model.addRow(new Object[]{idMenu, namaMenu, Deskripsi, Harga});
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat merefresh tabel.");
    }

    }//GEN-LAST:event_btsimpanPerubahanActionPerformed

    private void bthapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bthapusActionPerformed
        // TODO add your handling code here:
        int selectedRow = tabelMenu.getSelectedRow();

    if (selectedRow == -1) {
        // Tidak ada baris yang dipilih
        JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus!");
        return;
    }

    String idCustomer = (String) tabelMenu.getValueAt(selectedRow, 0);

    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk menghapus data
        String sql = "DELETE FROM menu WHERE id_menu=?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            // Mengatur nilai parameter PreparedStatement
            pstmt.setString(1, idCustomer);

            // Menjalankan pernyataan hapus
            int rowsDeleted = pstmt.executeUpdate();

            // Memberikan informasi bahwa data telah dihapus
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
            } else {
                JOptionPane.showMessageDialog(this, "Gagal menghapus data.");
            }

            // Refresh tabel setelah menghapus
            refreshTable();
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data.");
    }
    }//GEN-LAST:event_bthapusActionPerformed

    private void bteditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bteditActionPerformed
        // TODO add your handling code here:
        int selectedRow = tabelMenu.getSelectedRow();

    // Pastikan baris terpilih
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih baris yang akan diedit.");
        return;
    }

    // Mendapatkan nilai kolom dari baris terpilih
    String ID_Menu = tabelMenu.getValueAt(selectedRow, 0).toString();
    String Nama_Menu = tabelMenu.getValueAt(selectedRow, 1).toString();
    String Deskripsi = tabelMenu.getValueAt(selectedRow, 2).toString();
    String Harga = tabelMenu.getValueAt(selectedRow, 3).toString();

    // Menampilkan nilai saat ini pada inputan
    idmenu.setText(ID_Menu);
    namamenu.setText(Nama_Menu);
    deskripsi.setText(Deskripsi);
    harga.setText(Harga);
    }//GEN-LAST:event_bteditActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btbersihkan;
    private javax.swing.JButton btedit;
    private javax.swing.JButton bthapus;
    private javax.swing.JButton btsimpan;
    private javax.swing.JButton btsimpanPerubahan;
    private javax.swing.JTextField deskripsi;
    private javax.swing.JTextField harga;
    private javax.swing.JTextField idmenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField namamenu;
    private javax.swing.JTable tabelMenu;
    // End of variables declaration//GEN-END:variables
}
