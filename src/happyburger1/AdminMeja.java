/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package happyburger1;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;


public class AdminMeja extends javax.swing.JInternalFrame {
    DefaultTableModel model;
 
    public AdminMeja() {
        initComponents();
        model = (DefaultTableModel) tabelmeja.getModel();
        populateTable();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui =(BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
 
    }
    
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        idmeja = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        kapasitas = new javax.swing.JTextField();
        status = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        simpandata = new javax.swing.JButton();
        hapus = new javax.swing.JButton();
        bersihkan = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelmeja = new javax.swing.JTable();
        back = new javax.swing.JButton();
        simpanperubahan = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Form Admin Meja", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe Print", 1, 18), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ID Meja");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Kapasitas");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Status");

        simpandata.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        simpandata.setForeground(new java.awt.Color(153, 153, 255));
        simpandata.setText("Simpan Data");
        simpandata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpandataActionPerformed(evt);
            }
        });

        hapus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        hapus.setForeground(new java.awt.Color(153, 153, 255));
        hapus.setText("Hapus");
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });

        bersihkan.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bersihkan.setForeground(new java.awt.Color(153, 153, 255));
        bersihkan.setText("Bersihkan");
        bersihkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bersihkanActionPerformed(evt);
            }
        });

        tabelmeja.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID MEJA", "KAPASITAS", "STATUS"
            }
        ));
        tabelmeja.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelmejaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelmeja);

        back.setBackground(new java.awt.Color(51, 51, 255));
        back.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        back.setForeground(new java.awt.Color(242, 242, 242));
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        simpanperubahan.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        simpanperubahan.setForeground(new java.awt.Color(153, 153, 255));
        simpanperubahan.setText("Simpan Perubahan");
        simpanperubahan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanperubahanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(back)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel2))
                                .addGap(69, 69, 69)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(kapasitas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                                    .addComponent(idmeja, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(status)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(bersihkan, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(simpandata, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(simpanperubahan)
                                .addGap(36, 36, 36)
                                .addComponent(hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(86, 86, 86)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idmeja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(kapasitas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(simpanperubahan, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(simpandata, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bersihkan, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)
                .addComponent(back)
                .addGap(118, 118, 118))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 215, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
private void populateTable() {
    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

            // Menyiapkan pernyataan SQL untuk mengambil data dari database
            String sql = "SELECT * FROM meja";
            try (java.sql.Statement stmt = conn.createStatement()) {
                // Mengosongkan model tabel
                DefaultTableModel model = (DefaultTableModel) tabelmeja.getModel();
                model.setRowCount(0);

                // Mengisi ulang data dari hasil query
                ResultSet rs = stmt.executeQuery(sql);
                while (rs.next()) {
                    String idMeja = rs.getString("id_meja");
                    int Kapasitas = rs.getInt("kapasitas"); // Menggunakan getInt() untuk tipe data INTEGER
                    String Status = rs.getString("status");

                    // Menambahkan data ke model tabel
                    model.addRow(new Object[]{idMeja, Kapasitas, Status});
                }
            }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengambil data dari database.");
    }

}
    private void simpandataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpandataActionPerformed
        // TODO add your handling code here:
String ID_Meja = idmeja.getText();
String Kapasitas = kapasitas.getText();
String Status = status.getText();

try {
    // Mendapatkan koneksi dari objek Koneksi
    Koneksi koneksi = new Koneksi();
    Connection conn = koneksi.conn;

    // Menyiapkan pernyataan SQL untuk menyimpan data
    String sql = "INSERT INTO meja (id_meja, kapasitas, status) VALUES (?, ?, ?)";
    try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
        // Mengatur nilai parameter PreparedStatement
        pstmt.setString(1, ID_Meja);

        // Mengonversi input kapasitas ke tipe data INTEGER dan menyetelnya
        try {
            int kapasitasValue = Integer.parseInt(Kapasitas);
            pstmt.setInt(2, kapasitasValue);
        } catch (NumberFormatException ex) {
            // Tangani kesalahan jika input kapasitas bukan angka
            JOptionPane.showMessageDialog(this, "Kapasitas harus berupa angka.");
            return; // Keluar dari metode jika terjadi kesalahan
        }

        pstmt.setString(3, Status);

        // Menjalankan pernyataan simpan
        pstmt.executeUpdate();

        // Memberikan informasi bahwa data telah disimpan
        JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");

        // Setelah menyimpan, bersihkan inputan
        idmeja.setText("");
        kapasitas.setText("");
        status.setText("");

        refreshTable();
    }
} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan data.");
}

    }//GEN-LAST:event_simpandataActionPerformed

    private void tabelmejaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelmejaMouseClicked
        // TODO add your handling code here:
        idmeja.setText(tabelmeja.getValueAt(tabelmeja.getSelectedRow(), 0).toString());
        kapasitas.setText(String.valueOf(tabelmeja.getValueAt(tabelmeja.getSelectedRow(), 1))); // Mengonversi nilai ke String
        status.setText(tabelmeja.getValueAt(tabelmeja.getSelectedRow(), 2).toString());
        simpandata.setEnabled(false);
        hapus.setEnabled(true);
    }//GEN-LAST:event_tabelmejaMouseClicked

    private void bersihkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bersihkanActionPerformed
        // TODO add your handling code here:
        idmeja.setText("");
        kapasitas.setText("");
        status.setText("");
    }//GEN-LAST:event_bersihkanActionPerformed

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusActionPerformed
        // TODO add your handling code here:
        int selectedRow = tabelmeja.getSelectedRow();

    if (selectedRow == -1) {
        // Tidak ada baris yang dipilih
        JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus!");
        return;
    }

    String idMeja = (String) tabelmeja.getValueAt(selectedRow, 0);

    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk menghapus data
        String sql = "DELETE FROM meja WHERE id_meja=?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            // Mengatur nilai parameter PreparedStatement
            pstmt.setString(1, idMeja);

            // Menjalankan pernyataan hapus
            int rowsDeleted = pstmt.executeUpdate();

            // Memberikan informasi bahwa data telah dihapus
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
            } else {
                JOptionPane.showMessageDialog(this, "Gagal menghapus data.");
            }

            // Refresh tabel setelah menghapus
            refreshTable();
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data.");
    }
    }//GEN-LAST:event_hapusActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        Dashboard brd = new Dashboard(); 
        brd.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        brd.pack();
        brd.setVisible(true);

        // Tutup form 
        JFrame thisFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        thisFrame.dispose();
    }//GEN-LAST:event_backActionPerformed

    private void simpanperubahanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanperubahanActionPerformed
        // TODO add your handling code here:
String ID_Meja = idmeja.getText();
String Kapasitas = kapasitas.getText();
String Status = status.getText();

try {
    // Mendapatkan koneksi dari objek Koneksi
    Koneksi koneksi = new Koneksi();
    Connection conn = koneksi.conn;

    // Menyiapkan pernyataan SQL untuk mengupdate data
    String sql = "UPDATE meja SET kapasitas=? WHERE id_meja=?";
    try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
        // Mengonversi nilai kapasitas ke tipe data INTEGER dan menyetelnya
        try {
            int kapasitasValue = Integer.parseInt(Kapasitas);
            pstmt.setInt(1, kapasitasValue);
        } catch (NumberFormatException ex) {
            // Tangani kesalahan jika nilai kapasitas bukan angka
            JOptionPane.showMessageDialog(this, "Kapasitas harus berupa angka.");
            return; // Keluar dari metode jika terjadi kesalahan
        }

        pstmt.setString(2, ID_Meja);

        // Menjalankan pernyataan update
        int rowsUpdated = pstmt.executeUpdate();

        // Memberikan informasi bahwa data telah diupdate
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Data berhasil diupdate!");
        } else {
            JOptionPane.showMessageDialog(this, "Gagal mengupdate data. Periksa kembali inputan Anda.");
        }

        // Setelah mengupdate, bersihkan inputan
        idmeja.setText("");
        kapasitas.setText("");
        status.setText("");

        // Refresh tabel
        refreshTable();
    }
} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengupdate data.");
}

    }
private void refreshTable() {
    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk mengambil data dari database
        String sql = "SELECT * FROM meja";
        try (PreparedStatement pstmt = conn.prepareStatement(sql); ResultSet rs = pstmt.executeQuery()) {
            // Mengosongkan model tabel
            DefaultTableModel model = (DefaultTableModel) tabelmeja.getModel();
            model.setRowCount(0);

            // Mengisi ulang data dari hasil query
            while (rs.next()) {
                String idMeja = rs.getString("id_meja");
                String Kapasitas = rs.getString("kapasitas");
                String Status = rs.getString("status");

                // Menambahkan data ke model tabel
                model.addRow(new Object[]{idMeja, Kapasitas, Status});
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat merefresh tabel.");
    }
    }//GEN-LAST:event_simpanperubahanActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton bersihkan;
    private javax.swing.JButton hapus;
    private javax.swing.JTextField idmeja;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField kapasitas;
    private javax.swing.JButton simpandata;
    private javax.swing.JButton simpanperubahan;
    private javax.swing.JTextField status;
    private javax.swing.JTable tabelmeja;
    // End of variables declaration//GEN-END:variables
}
