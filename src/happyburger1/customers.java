/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package happyburger1;

import java.beans.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;

/**
 *
 * @author damha
 */
public class customers extends javax.swing.JInternalFrame {

    DefaultTableModel model;
    /**
     * Creates new form customers
     */
    public customers() {
        initComponents();
        model = (DefaultTableModel) tabelCustomer.getModel();
        populateTable();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui =(BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        idcustomer = new javax.swing.JTextField();
        nama = new javax.swing.JTextField();
        nohp = new javax.swing.JTextField();
        alamat = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        bersihkan = new javax.swing.JButton();
        perubahan = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelCustomer = new javax.swing.JTable();
        edit = new javax.swing.JButton();
        hapus = new javax.swing.JButton();
        simpandata = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(0, 0));

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pengisian Data Customer", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe Print", 1, 18), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID Customer");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nama");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Nomor Hp");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Alamat");

        nama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaActionPerformed(evt);
            }
        });

        nohp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nohpActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(51, 51, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        bersihkan.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bersihkan.setForeground(new java.awt.Color(153, 153, 255));
        bersihkan.setText("Bersihkan");
        bersihkan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bersihkanActionPerformed(evt);
            }
        });

        perubahan.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        perubahan.setForeground(new java.awt.Color(153, 153, 255));
        perubahan.setText("Simpan Perubahan");
        perubahan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perubahanActionPerformed(evt);
            }
        });

        tabelCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID Customer", "Nama", "Nomor Hp", "Alamat"
            }
        ));
        jScrollPane1.setViewportView(tabelCustomer);
        if (tabelCustomer.getColumnModel().getColumnCount() > 0) {
            tabelCustomer.getColumnModel().getColumn(0).setHeaderValue("ID Customer");
            tabelCustomer.getColumnModel().getColumn(1).setHeaderValue("Nama");
            tabelCustomer.getColumnModel().getColumn(2).setHeaderValue("Nomor Hp");
            tabelCustomer.getColumnModel().getColumn(3).setHeaderValue("Alamat");
        }

        edit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        edit.setForeground(new java.awt.Color(153, 153, 255));
        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        hapus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        hapus.setForeground(new java.awt.Color(153, 153, 255));
        hapus.setText("Hapus");
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });

        simpandata.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        simpandata.setForeground(new java.awt.Color(153, 153, 255));
        simpandata.setText("Simpan Data");
        simpandata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpandataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(69, 69, 69)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(idcustomer)
                            .addComponent(nama)
                            .addComponent(nohp)
                            .addComponent(alamat, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(bersihkan, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(simpandata, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(perubahan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idcustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nohp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(alamat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bersihkan, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perubahan, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hapus, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(simpandata, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(33, 33, 33))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(146, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateTable() {
    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk mengambil data dari database
        String sql = "SELECT * FROM customers";
        try (java.sql.Statement stmt = conn.createStatement()) {
            // Mengosongkan model tabel
            DefaultTableModel model = (DefaultTableModel) tabelCustomer.getModel();
            model.setRowCount(0);

            // Mengisi ulang data dari hasil query
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                String idCustomer = rs.getString("id_customer");
                String nama = rs.getString("nama");
                String nomorHP = rs.getString("nomor_hp");
                String alamat = rs.getString("alamat");

                // Menambahkan data ke model tabel
                model.addRow(new Object[]{idCustomer, nama, nomorHP, alamat});
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengambil data dari database.");
    }

}


    private void namaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Dashboard brd = new Dashboard(); 
        brd.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        brd.pack();
        brd.setVisible(true);

        // Tutup form 
        JFrame thisFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
        thisFrame.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void perubahanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perubahanActionPerformed
        // TODO add your handling code here:
    String ID_Customer = idcustomer.getText();
    String Nama = nama.getText();
    String NO_HP = nohp.getText();
    String Alamat = alamat.getText();

    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk mengupdate data
        String sql = "UPDATE customers SET nama=?, nomor_hp=?, alamat=? WHERE id_customer=?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            // Mengatur nilai parameter PreparedStatement
            pstmt.setString(1, Nama);
            pstmt.setString(2, NO_HP);
            pstmt.setString(3, Alamat);
            pstmt.setString(4, ID_Customer);

            // Menjalankan pernyataan update
            int rowsUpdated = pstmt.executeUpdate();

            // Memberikan informasi bahwa data telah diupdate
            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil diupdate!");
            } else {
                JOptionPane.showMessageDialog(this, "Gagal mengupdate data. Periksa kembali inputan Anda.");
            }

            // Setelah mengupdate, bersihkan inputan
            idcustomer.setText("");
            nama.setText("");
            nohp.setText("");
            alamat.setText("");

            // Refresh tabel
            refreshTable();
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat mengupdate data.");
    }
}

private void refreshTable() {
    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk mengambil data dari database
        String sql = "SELECT * FROM customers";
        try (PreparedStatement pstmt = conn.prepareStatement(sql); ResultSet rs = pstmt.executeQuery()) {
            // Mengosongkan model tabel
            DefaultTableModel model = (DefaultTableModel) tabelCustomer.getModel();
            model.setRowCount(0);

            // Mengisi ulang data dari hasil query
            while (rs.next()) {
                String idCustomer = rs.getString("id_customer");
                String nama = rs.getString("nama");
                String nomorHP = rs.getString("nomor_hp");
                String alamat = rs.getString("alamat");

                // Menambahkan data ke model tabel
                model.addRow(new Object[]{idCustomer, nama, nomorHP, alamat});
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat merefresh tabel.");
    }

    }//GEN-LAST:event_perubahanActionPerformed

    private void bersihkanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bersihkanActionPerformed
        // TODO add your handling code here:
        idcustomer.setText("");
        nama.setText("");
        alamat.setText("");
        nohp.setText("");
    }//GEN-LAST:event_bersihkanActionPerformed

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusActionPerformed
        // TODO add your handling code here:
        int selectedRow = tabelCustomer.getSelectedRow();

    if (selectedRow == -1) {
        // Tidak ada baris yang dipilih
        JOptionPane.showMessageDialog(this, "Pilih baris yang ingin dihapus!");
        return;
    }

    String idCustomer = (String) tabelCustomer.getValueAt(selectedRow, 0);

    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk menghapus data
        String sql = "DELETE FROM customers WHERE id_customer=?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            // Mengatur nilai parameter PreparedStatement
            pstmt.setString(1, idCustomer);

            // Menjalankan pernyataan hapus
            int rowsDeleted = pstmt.executeUpdate();

            // Memberikan informasi bahwa data telah dihapus
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
            } else {
                JOptionPane.showMessageDialog(this, "Gagal menghapus data.");
            }

            // Refresh tabel setelah menghapus
            refreshTable();
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menghapus data.");
    }
    }//GEN-LAST:event_hapusActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        // TODO add your handling code here:
        // Mendapatkan baris yang dipilih
    int selectedRow = tabelCustomer.getSelectedRow();

    // Pastikan baris terpilih
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih baris yang akan diedit.");
        return;
    }

    // Mendapatkan nilai kolom dari baris terpilih
    String ID_Customer = tabelCustomer.getValueAt(selectedRow, 0).toString();
    String Nama = tabelCustomer.getValueAt(selectedRow, 1).toString();
    String NO_HP = tabelCustomer.getValueAt(selectedRow, 2).toString();
    String Alamat = tabelCustomer.getValueAt(selectedRow, 3).toString();

    // Menampilkan nilai saat ini pada inputan
    idcustomer.setText(ID_Customer);
    nama.setText(Nama);
    nohp.setText(NO_HP);
    alamat.setText(Alamat);

    }//GEN-LAST:event_editActionPerformed

    private void simpandataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpandataActionPerformed
        // TODO add your handling code here:
        String ID_Customer = idcustomer.getText();
    String Nama = nama.getText();
    String NO_HP = nohp.getText();
    String Alamat = alamat.getText();

    try {
        // Mendapatkan koneksi dari objek Koneksi
        Koneksi koneksi = new Koneksi();
        Connection conn = koneksi.conn;

        // Menyiapkan pernyataan SQL untuk menyimpan data
        String sql = "INSERT INTO customers (id_customer, nama, nomor_hp, alamat) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            // Mengatur nilai parameter PreparedStatement
            pstmt.setString(1, ID_Customer);
            pstmt.setString(2, Nama);
            pstmt.setString(3, NO_HP);
            pstmt.setString(4, Alamat);

            // Menjalankan pernyataan simpan
            pstmt.executeUpdate();

            // Memberikan informasi bahwa data telah disimpan
            JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");

            // Setelah menyimpan, bersihkan inputan
            idcustomer.setText("");
            nama.setText("");
            nohp.setText("");
            alamat.setText("");

            // Refresh tabel setelah menyimpan data
            refreshTable();
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan data.");
    }
    
    }//GEN-LAST:event_simpandataActionPerformed

    private void nohpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nohpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nohpActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alamat;
    private javax.swing.JButton bersihkan;
    private javax.swing.JButton edit;
    private javax.swing.JButton hapus;
    private javax.swing.JTextField idcustomer;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nama;
    private javax.swing.JTextField nohp;
    private javax.swing.JButton perubahan;
    private javax.swing.JButton simpandata;
    private javax.swing.JTable tabelCustomer;
    // End of variables declaration//GEN-END:variables




}
